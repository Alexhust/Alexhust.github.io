* TODO 构建一个基于u/cosiii的多任务的应用
** 构建两个任务的基础模型
*** 任务一：任务优先级为2，任务为让绿色灯闪烁
*** 任务二：任务优先级为3，任务为让蓝色灯闪烁
* TODO 兵欲善其事，必先利其器[50%]
** DONE 对于浏览器的明确定位，chrome用于科研方面任务，猎豹（maybe others）用于娱乐方面的需求
*** chrome的配置
**** 主要用的扩展：gestures for Google Chrome、New Tab Plus(微度新标签页)
**** 另外还有一些关于chrome的知识，摘录如下：
       1) Omnibox 

         也就是chrome的地址栏 这个地址栏功能非常强大 集打开网址 搜索 多引擎搜索切换于一体.  右击地址栏 选择修改搜索引擎 可以管理你的搜索引擎 
         chrome会自动记录你用过的所有搜索引擎 在管理页面 分为三个栏目 最左边的是搜索引擎的名称 中间的是快捷键 右边是搜索地址 
         一般将快捷键设置成好记一点的字母，比如将Baidu设置成b，这样每次在Omnibox中输入b再空格后，就能用百度搜索。默认设置的搜索为谷歌搜索。

	 2) 任务管理器 

         右击标签页选择任务管理器或者按下Shfit+esc会弹出任务管理器 功能很强大 详细的列出运行的标签 扩展 APPS及其占用的内存 网络资源 CPU 等等一系列东西               在里面可以强制结束标签页或者扩展
      
     3) 实验室

          在地址栏键入about:flags进入实验室 实验内都是一些没有开发完成 还在测试的新功能 可以按照自己喜好打开一些 记住 浏览器要重启才会生效

***  另外将在记得chrome浏览器和自己的google账户绑定之后，扩展可以跟随账户走，即就是在新的环境下安装chrome后可以免除插件安装的繁杂过程
*** chrome快捷键
**** Ctrl+L 突出显示网址
**** 键入网址中"www."和 ".com"之间的部分，然后按 Ctrl+Enter 为您在地址栏中输入的内容添加"www."和".com"，然后打开网址
**** 按 Ctrl+O，然后选择文件。 在谷歌浏览器中打开计算机中的文件
**** Ctrl+1 到 Ctrl+8 切换到标签栏中指定位置编号所对应的标签页，Ctrl+9 切换到最后一个标签页
**** Ctrl+H 查看历史记录页
**** Ctrl+U 查看源代码
**** Ctrl++ 放大文字、Ctrl+- 缩小文字
** TODO  版本控制 github[1/2]
*** DONE 初步体验了git的基本流程
    1)建立仓库

    2)添加（add）待管理的代码到仓库中

    3)提交（commit）差异化代码完成本地的版本控制

    4)推送（push）到github完成多方的版本控制
	
*** TODO 阅读Pro Git的书籍
**** 第一章笔记
***** 版本控制系统的类型    
    - 本地版本控制系统：RCS
    - 集中化版本控制系统：CVS、Subversion
    - 分布式版本控制系统：Git、Mercurial
***** Git的基础要点
    - 直接快照
    - 所有操作本地化
    - 通过哈希值时刻保证数据的完整性（所有保存在git数据库中的东西都是通过哈希值索引）
    - 三种状态（已提交、已缓存、已修改）
***** Git的配置
    - 通过git config --global core.editor emacs配置默认的编辑器
    - 通过git config --list查看已有的配置信息
**** 第二章（Git 基础）
***** 取得项目的Git仓库
    - 从当前目录初始化
    - 从现有仓库克隆	  
***** git add命令
    git add命令是一个多功能命令，根据目标文件的状态不同，此命令的效果也不同
    - 跟踪新的文件（untracked->staged）
    - 可以把已经跟踪的文件放在缓存区(modified -> staged)
    - 合并时把有冲突的文件标记为已经解决状态

***** 忽略某些文件（通过.gitignore文件）
    - .gitignore文件的位置\\
       位于和.git文件夹相同的文件路径，并添加到当前git仓库的管理当中
    -  .gitignore文件的编写
      1) 所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略
      2) 可以使用标准的 glob 模式匹配(shell使用的简化的正则表达式)
      3) 匹配模式最后跟反斜杠（/）说明要忽略的是目录
      4) 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反
***** git diff
    - git diff 用于比较工作目录中的当前文件和暂存区域快照之间的差异
    - git diff --cache 用于比较暂存起来的文件和上次提交快照之间的差异 (--staged is a synonym of --cached)
***** git commit -a 选型可以自动把所有已经跟踪过的文件暂存起来一并提交，跳过了git add的步骤
***** git rm 
      - 可以从已经跟踪文件清单中（确切说，是从暂存区域中移除），同时从工作目录中删除指定的文件    
      - 仅移除跟踪但不删除文件 git rm --cached <file>
***** git mv 完成跟踪文件的重命名工作，相当于如下的三个步骤（已将readme重命名为readme1为例）
      - mv readme readme1
      - git rm readme
      - git add readme1 
       
***** git log 命令获取该项目源代码 
****** 命令选项      
      - 选项 p 按补丁格式显示每个更新之间的差异。
      - 选项 stat 显示每次更新的文件修改统计信息。
      - 选项 shortstat 只显示 --stat 中最后的行数修改添加移除统计。
      - 选项 name-only 仅在提交信息后显示已修改的文件清单。
      - 选项 name-status 显示新增、修改、删除的文件清单。
      - 选项 abbrev-commit 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。
      - 选项 relative-date 使用较短的相对时间显示（比如，“2 weeks ago”）。
      - 选项 graph 显示 ASCII 图形表示的分支合并历史。
      - 选项 pretty 使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。
      - 选型 -2显示最近的两次更新
      - 详细的信息可查 git -log --help   
****** 图形化工具查看 
      - 使用命令gitk启动图形化界面
      - sourcetree的图形化界面应该也是基于Gui git的，因为在没有安装GUI git的机器上在sourcetree下面依然可以调用Gui git

***** 撤销
      - 撤销刚才的撤销工作 git commit --amend
      - 取消已经暂存的文件 git reset HEAD <文件>
      - 取消刚刚对文件的修改 git checkout -- <文件>
      - 可以通过查看git status获得当前状态下对文件操作相关命令
		
***** 远程仓库
****** 查看当前的远程仓库 git remote (推荐使用选项 -v 获得对应的克隆地址)
****** 添加远程仓库 git remote add [shortname] [url]
****** 从远程仓库抓取数据 git fetch [remote-name] 
      - fetch 命令只是将远端的数据拉到本地仓库，并不自动合并到当前工作分支
****** 推送数据到远端 git push [remote-name] [branch-name]
      -  如果在你推数据前，已经有其他人推送了若干更新，那你的推送操作就会被驳回。你必须先把他们的更新抓取到本地，并到自己的项目中，然后才可以再次推送。强推错误如下：Updates were rejected because the remote contains work that you do not have locally. 
****** 查看远程仓库信息 git remote show [remote-name]
****** 远程仓库的删除 git remote rm [remote-name]  
****** 远程仓库的重命名 git remote rename [remote-name]
***** 标签  对某一时间点的版本进行标记
****** 列出现有标签 git tag
****** 新建标签
******* 轻量级标签，仅标签本身，是指向特定提交对象的应用
            - 例 git tag v1.3 
******* 含附注， 独立对象，含有自己的校验和信息，包含着标签的名字、电子邮件地址和日期及标签说明
            - 例：git tag -a v1.4 -m 'my version 1.4'
            - 使用git show 查看相应标签的版本详细
 
****** 分享标签到远端
          - 单个标签 git push origin [tagname]
          - 所有标签 git push origin --tags
***** 技巧
****** Git命令别名
          - 内部命令，例:  git config --global alias.unstaged 'reset HEAD --' 
          - 外部命令，例:  git config --global alias.visual "!gitk"
**** 第三章（Git 分支）
   Git提交时，会保存一个提交（commit）对象，它包含一个指向暂存内容快照的指针，作者和相关附属信息，以及一定数量（也可能没有）指向该提交对象直接祖先的指针
   第一次提交是没有直接祖先的，普通提交有一个祖先，由两个或多个分支合并产生的提交则有多个祖先
***** Git仓库的对象(commit对象、tree对象、blob对象)
            - 若干文件快照的blob对象（二进制大对象）
		 - 一个记录着目录树内容及其中各个文件对应blob对象索引的tree对象
		 - 一个包含指向tree对象（根目录）的索引和其他提交信息元数据的commit对象
	  [[~\todos\res.png]]
                               一次提交后的GIt仓库的对象
    
        [[~\todos\res1.png]]
                               多次提交后的Git仓库的对象
            - git分支本质上是指向commit对象的可变指针,包含所指对象校验和的文件。指针指向最后一次提交对象，且该指针在每次提交的时候都会自动向前移动
            - git中的HEAD指针指向正在工作中的本地分支的指针
***** 基本的分支操作
****** 创建分支  git branch [branch-name]（-b选项可完成创建并切换到新创建的分支）
****** 切换分支  git checkout [branch-name]
****** 合并分支
******* 基本合并
              ＋ Fast forward 待合并的两个分支有共同的直接祖先，简单的指针前移
		   ＋ 待合并的两个分支没有共同的直接祖先，自动进行简单的合并计算，对合并结果统一快照
******* 冲突合并：Git会在有冲突的文件中加入标准的冲突解决标记，手动定位并解决冲突，完成合并

****** 删除分支 git branch -d [branch-name] 
****** 查看当前的分支信息 git branch (-v命令查看verbose信息)
***** 分支工作流程
****** 长期分支
****** 特性分支
          - question：page51 how to branch from C4 to iss91v2 when the branch iss91 is already at point C6
***** 远程分支
****** 推送 
        - 完整的推送命令格式 git push [remote-name] [localbranch]:[remotebranch]
        - 简化的推送命令 git push [remote-name] [remotebranch] 将当前的分支内容推送到远端的remotebranch分支
        - 简化的远端分支删除命令 git push [remote-name] :[remotebranch] 分号前为空表示将推送空内容到remotebranch
****** 跟踪分支 
        - git checkout --track [remote-name]/[remotebranch] 让当前分支跟踪远端的remotebranch分支
        - git checkout -b [localbranch] [remote-name]/[remotebranch] 让本地分支[localbranch]跟踪远端的remotebranch分支
***** 衍合rebase
****** 无论是通过一次衍合还是一次三方合并，都是同样的快照内容，只是提交的历史不同罢了
****** 命令格式git rebase [主分支] [特性分支]    命令会先检出特性分支server,然后在主分支master上重演
****** 金科玉律：永远不要衍合那些已经推送到公共仓库的更新
**** 第四章（GitHub）
***** 共享者将自己对项目的改进被核心开发团队所了解并接纳
          1) 先用git format-patch命令将本地提交转换为补丁文件或补丁文件序列，再通过邮件发送给核心开发团队。
          2) 搭建一个自己专有的共享版本库，通过邮件创建一个拉拽请求（Pull Request），让核心团队的开发者到自己的版本库来抓取（Pull）。
***** 无处不在的Git。
          1) 维基使用Git，可以通过克隆维基所在的版本库，离线修改维基；
          2) 在线粘贴数据的Gist网站使用Git，记录变更历史；
          3) 在Jekyll应用的帮助下，用Git版本库维护个人网站和博客等。
***** 公钥管理:
          因为SSH协议使用公钥认证，可以实现无口令访问，而若使用HTTPS协议每次身份认证时都需要提供口令 
****** 用户级公钥管理
          可以按照github Account Setting中的SSH keys的引导进行用户公钥的设置，不同的电脑有不同的公钥/私钥对，用户级公钥可以管理用户的所有仓库
****** 项目级公钥管理
          功能主要在于管理对象细化到用户中的某个项目仓库，可以通过github中每个仓库下的Deploy keys进行设置。设置方式和用户级公钥相同
